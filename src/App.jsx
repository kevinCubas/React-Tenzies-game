import {useEffect, useState} from "react"
import Die from "./Die"
import {nanoid} from "nanoid"
import Confetti from "react-confetti"
import './App.css'

export default function App() {
    //---------------------States-------------------------
    const [dice, setDice] = useState(() => allNewDice())
    const [tenzies, setTenzies] = useState(() => false)
    const [startGame, setStartGame] = useState(() => console.log(false))
    const [secondsAmount, setSecondsAmount] = useState(0)
    const [count, setCount] = useState(0)
    //-------------------Timer variables---------------------
    const minutes = Math.floor(secondsAmount / 60);
    const seconds = secondsAmount % 60;
    const hours = 3600 // 1 hour === 3600 seconds    
    
    //-------------------Side Effects-----------------------------
    useEffect(() => {
      if(count === 1) {
        setSecondsAmount(state => state + 1)
        setStartGame(true)
      }
    }, [count === 0])
        //this creates a loop if the tenzies state is set to false
    useEffect(() => {
        if(!tenzies && startGame) {
            setTimeout(() => {
            setSecondsAmount(state => state + 1)
        }, 1000)
        }
    }, [secondsAmount]);
        //verifies if all held values are equal, if so it set tenzies to true and wins the game
    useEffect(() => {
        const allHeld = dice.every(die => die.isHeld)
        const firstValue = dice[0].value
        const allSameValue = dice.every(die => die.value === firstValue)
        if (allHeld && allSameValue) {
            setTenzies(true)
        }
    }, [dice])
    
    //--------------------Functions---------------------------------
      //this generates a random number    
    function generateNewDie() {
    return {
            value: Math.ceil(Math.random() * 6),
            isHeld: false,
            id: nanoid()
        }
    }
      //this return a 10 random numbers array generated by the previous function
    function allNewDice() {
        const newDice = []
        for (let i = 0; i < 10; i++) {
            newDice.push(generateNewDie())
        }
        return newDice
    }
      //this generates new numbers and keep the selected ones
      // this also increments the count state and reset the game after win    
    function rollDice() {
        if(!tenzies) {
            setCount(oldCount => oldCount +1)
            setDice(oldDice => oldDice.map(die => {
                return die.isHeld ? 
                    die :
                    generateNewDie()
            }))
        } else {
            setTenzies(false)
            setDice(allNewDice())
            setSecondsAmount(0)
            setCount(0)
            setStartGame(false)
        }
    }
      //this verifies the id of the die and change the isHeld
    function holdDice(id) {
        setDice(oldDice => oldDice.map(die => {
            return die.id === id ? 
                {...die, isHeld: !die.isHeld} :
                die
        }))
    }
    
    const diceElements = dice.map(die => (
        <Die 
            key={die.id} 
            value={die.value} 
            isHeld={die.isHeld} 
            holdDice={() => holdDice(die.id)}
        />
    ))

    //----------------Render the component----------------   
    return (
        <main>
            {tenzies && <Confetti/> }
            <div>
                <span>{secondsAmount >= hours ? "It's taking so long: " :
                 "Your time: "}</span>
                <span>{String(minutes).padStart(2, "0")}</span>
                <span>:</span>
                <span>{String(seconds).padStart(2, "0")}</span>                
            </div>
            <h1 className="title">Tenzies</h1>
            <p className="instructions">Roll until all dice are the same. 
            Click each die to freeze it at its current value between rolls.</p>
            <p className="instructions">Select a number and press Roll to start</p>
            <div className="dice-container">
                {diceElements}
            </div>
            <button 
                className="roll-dice" 
                onClick={rollDice}
            >
                {tenzies ? "New Game" : "Roll"}
            </button>
            <div>
                <span>{tenzies ? `It took ${count} rolls to win` :
                 `Number of Rolls: ${count}`}</span>
            </div>
        </main>
    )
}